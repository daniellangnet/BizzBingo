@using BizzBingo.Web.Areas.Wiki.Models
@using BizzBingo.Web.Models
@model DetailTermViewModel
@{
    ViewBag.Title = Model.Title;
}
<div class="hero-unit">
    <img style="margin-left: 655px; opacity: .3; height: 150px; position: absolute;" src="@Url.Content("~/Content/Images/cerealman.png")" alt="" />
    <h1>
        @Model.Title</h1>
    <p>
        Everything you always wanted to know about @Model.Title but were afraid to ask
    </p>
</div>
<div class="row">
    <div class="span16">
        <section>
            <div class="row">
                <div class="span10">
                    <div class="page-header">
                        <h2>What is @Model.Title?</h2>
                    </div>
                    <div id="stackoverflowResult" style="overflow-x: hidden;"></div>
                    <div id="stackoverflowResultFound" style="display: none;" class="well">
                        <p><strong>This information is from the awesome <a href="http://stackoverflow.com/tags/@Model.Slug.ToLower()/info">Stackoverflow Community</a></strong>.<br/> Thank you guys for your great work!</p>
                    </div>
                    <div id="stackoverflowResultNotFound" style="display: none;" class="alert-message block-message warning">
                        <p><strong>We searched for the information on <a href="http://stackoverflow.com/">Stackoverflow.com</a>, but didn´t find anything.</strong><br/> But it would be awesome, if you could help and share some information on Stackoverflow too!</p>
                    </div>
                </div>
                <div class="span5 offset1">
                    <div class="page-header">
                        <h2>
                            Stats</h2>
                    </div>
                    <table class="zebra-striped">
                        <tbody>
                            <tr>
                                <td>
                                    Shared on
                                </td>
                                <td>
                                    @Model.CreatedOn
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Views
                                </td>
                                <td id="stateViews">
                                    @Model.Views
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Likes
                                </td>
                                <td id="stateUpvotes">
                                    @Model.UpVotes
                                </td>
                            </tr>
                            <tr>
                                <td>
                                    Don´t likes
                                </td>
                                <td id="stateDownvotes">
                                    @Model.DownVotes
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </section>
        <section>
            <canvas id="stackoverflowRelated" width="940" height="400"></canvas>
        </section>
        <section>
            <div id="opinion" class="hero-unit">
                <img style="margin-left: 655px; opacity: .3; height: 150px; position: absolute;" src="@Url.Content("~/Content/Images/think.png")" alt="" />
                <h2>
                    What do you think about @Model.Title?</h2>
                    <p>
                        <br/>
                        <a class="btn danger" href="#wtf">
                        I think, @Model.Title sucks!</a>
                        <a class="btn success" href="#omg">
                        I think, @Model.Title rocks!</a>
                    </p>
            </div>        
        </section>
        <section id="wtf">
        <div class="row">
            <div class="span16" >
                <div class="page-header">
                    <h3>WTF! @Model.Title sucks!&nbsp;</h3>
                </div>
                <div class="row">
                    <div class="span6">
                        <div class="well" style="min-height: 220px;">
                            <img style="margin-left: 5px; opacity: .3; position: absolute; height: 200px;" src="@Url.Content("~/Content/Images/wtf.png")" alt="">
                        </div>
                    </div>
                    <div class="offset1 span9">
                    @foreach (var reaction in Model.NegativeReaction)
                    { 
                    <div class="row">
                        <div class="page-header">
                            <h4>@Model.Title <i>is</i> @reaction.Title <small>@reaction.CreatedOn.ToShortDateString()</small></h4>
                        </div>
                        <p><i>because</i> @reaction.Reason</p>
                    </div>
                    }
                    <div class="row">
                        <div class="alert-message block-message warning">
                            <p><strong>Your best WTF moment is wanted!</strong> Share your story of pain and tell us why @Model.Title really sucks.</p>
                            <div class="alert-actions">
                              <a class="btn small" href="@Url.Action("Suckness", "Term", new { slug = Model.Slug })">Yeah, great idea!</a>
                            </div>
                        </div>
                    </div>
                </div>
                </div>
                
            </div>
        </div>
        </section>
        <section id="omg">
        <div class="row">
            <div class="span16" >
                <div class="page-header">
                    <h3>OMG! I &lt;3 @Model.Title!&nbsp;</h3>
                </div>
                <div class="row">
                    <div class="span6">
                        <div class="well" style="min-height: 220px;">
                            <img style="margin-left: 70px; opacity: .3; position: absolute; height: 220px;" src="@Url.Content("~/Content/Images/yeah.png")" alt="">
                        </div>
                    </div>
                    <div class="offset1 span9">
                    @foreach (var reaction in Model.PositiveReaction)
                    { 
                    <div class="row">
                        <div class="page-header">
                            <h4>@Model.Title <i>is</i> @reaction.Title <small>@reaction.CreatedOn.ToShortDateString()</small></h4>
                        </div>
                        <p><i>because</i> @reaction.Reason</p>
                    </div>
                    }
                    <div class="row">
                        <div class="alert-message block-message warning">
                            <p><strong>Greatest thing since sliced bread?</strong> Share your story of success and why @Model.Title really rocks.</p>
                            <div class="alert-actions">
                              <a class="btn small" href="@Url.Action("Awesomeness", "Term", new { slug = Model.Slug })">Yeah, great idea!</a>
                            </div>
                        </div>
                    </div>
                    </div>
                </div>
                
            </div>
        </div>
        </section>
        <section>
        <div class="row">
            <div class="span16">
                        <div class="page-header">
                    <h2>
                        Good to know</h2>
                </div>
                <ul class="tabs">
                    <li class="active"><a href="#all">All resources</a></li>
                    <li><a href="#popular">Popularity</a></li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane active" id="all">
                        @foreach (DetailResourceViewModel resource in Model.Resources)
                        {
                            <div class="row">
                                <div class="span15">
                                    <div class="page-header">
                                        <h3>@resource.Title</h3>
                                    </div>
                                    <p>@resource.Description</p>
                                </div>
                            </div>
                            <div class="row">
                                @*                        <div class="span3">
                                <div class="well" style="padding: 14px 19px;">
                                    <input id="upvote" class="btn" type="button" value="+1">
                                    <input id="downvote" class="btn" type="button" value="-1">
                                </div>
                        </div>*@
                                <div class="span15">
                                    <a href="@resource.Url">Loading...</a>
                                </div>
                            </div>

                        }
                        <div class="row">
                            <div class="span16">
                                
                                <div class="page-header">
                                    <h3>Add a new resource</h3>
                                </div>
                                @if (Model.CurrentUserInformation.IsAuthenticated == false)
                                {
                                    Html.RenderPartial("SignIn");
                                }
                                else
                                {
                                    <div class="alert-message info">
                                        <p><strong>Sharing a new information gives you +@ActionPoints.AddInformation reputation!</strong> This will gonna be huge!</p>
                                    </div>
                                }
                                @using (Ajax.BeginForm("Resource", "Term", new AjaxOptions() { HttpMethod = "POST", OnComplete = "resourceAdded" }))
                                {
                                    <fieldset>
                                        @Html.Hidden("TermId", Model.Id)
                                        @Html.Hidden("Type", "link", new { id = "type" })
                                        <div class="clearfix">
                                            <label for="url">
                                                Url</label>
                                            <div class="input">
                                                <input class="xlarge" id="url" name="url" size="30" type="text">
                                            </div>
                                        </div>
                                        <div class="clearfix">
                                            <label for="title">
                                                Title</label>
                                            <div class="input">
                                                <input class="xlarge" id="title" name="title" size="30" type="text">
                                            </div>
                                        </div>
                                        <div class="clearfix">
                                            <label for="description">
                                                Description</label>
                                            <div class="input">
                                                <textarea class="xlarge" id="description" name="description" rows="3"></textarea>
                                            </div>
                                        </div>
                                        <div class="clearfix">
                                            <label for="viasource">
                                                What was your original source?</label>
                                            <div class="input">
                                                <input class="xlarge" id="viasource" name="viasource" size="30" type="text">
                                            </div>
                                        </div>
                                        <div class="clearfix" id="preview">
                                        </div>
                                        <div class="actions">
                                            <input type="submit" class="btn primary" value="Save changes">&nbsp;
                                            <button type="reset" class="btn">
                                                Cancel</button>
                                        </div>
                                    </fieldset>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="tab-pane" id="popular">
                        <img src="http://www.google.com/trends/viz?q=@Url.Encode(Model.Title)&geo=all&date=all&graph=gadget&width=900&height=190&hl=en" />
                        <p>
                            <a href="http://www.google.com/insights/search/#q=@Url.Encode(Model.Title)&cmpt=date">
                                Search Insight by Google</a></p>
                    </div>
                </div>
            </div>
        </div>
        </section>
    </div>
</div>
@section Scripts
{
    <!-- doesn´t like combres -->
    <script type="text/javascript" src="@Url.Content("~/Scripts/arbor.js")"></script>
    <script type="text/javascript" src="@Url.Content("~/Scripts/arbor-graphics.js")"></script>
    
    <script type="text/javascript">

        $(function () {

            $.ajax({
                type: 'GET',
                url: 'http://api.stackoverflow.com/1.1/tags/@Model.Slug/wikis',
                dataType: 'jsonp',
                success: function (data) {
                    if (data.tag_wikis.length > 0) {
                        if (data.tag_wikis[0].wiki_body != "") {
                            $("#stackoverflowResult").html(data.tag_wikis[0].wiki_body);
                        }
                        else {
                            $("#stackoverflowResult").html(data.tag_wikis[0].wiki_excerpt);
                        }
                        $("#stackoverflowResultFound").show();
                        searchRelatedTags();
                        $("#stackoverflowRelated").show();
                    }
                    else {
                        $("#stackoverflowResultNotFound").show();
                    }
                },
                jsonp: 'jsonp'
            });

            $("#opinion > a").scrollSpy();

            $("#url").blur(function () {
                $.embedly($("#url").val(), { key: Global_EmbedLy_Key, maxWidth: 900 }, function (oembed, dict) {
                    $("#title").val(oembed.title);
                    $("#description").val(oembed.description);
                    $("#preview").html(oembed.html);
                    $("#type").val(oembed.type);
                });

            });

            $('.tabs').tabs();

            $('#all').embedly({
                maxWidth: 900,
                wmode: 'transparent',
                method: 'replace',
                key: Global_EmbedLy_Key
            });
        });

        function resourceAdded() {
            window.location.reload();
        }

        function searchRelatedTags() {
            var sys = arbor.ParticleSystem(1000, 600, 0.5); // create the system with sensible repulsion/stiffness/friction
            sys.parameters({ gravity: true }); // use center-gravity to make the graph settle nicely (ymmv)
            sys.renderer = renderRelatedTags("#stackoverflowRelated"); // our newly created renderer will have its .init() method called shortly by sys...

            $.ajax({
                type: 'GET',
                url: 'http://api.stackexchange.com/2.0/tags/@Model.Slug/related?site=stackoverflow',
                dataType: 'jsonp',
                success: function (data) {
                    if (data.items.length > 0) {
                        for (var c in data.items) {
                            sys.addNode(data.items[c].name);
                            sys.addEdge('@Model.Title', data.items[c].name);
                        }
                    }
                },
                jsonp: 'jsonp'
            });
        }

        function renderRelatedTags(canvas) {
            var canvas = $(canvas).get(0);
            var particleSystem;
            var gfx = arbor.Graphics(canvas);
            var that = {
                init: function (system) {
                    //
                    // the particle system will call the init function once, right before the
                    // first frame is to be drawn. it's a good place to set up the canvas and
                    // to pass the canvas size to the particle system
                    //
                    // save a reference to the particle system for use in the .redraw() loop
                    particleSystem = system;

                    // inform the system of the screen dimensions so it can map coords for us.
                    // if the canvas is ever resized, screenSize should be called again with
                    // the new dimensions
                    particleSystem.screenSize(canvas.width, canvas.height);
                    particleSystem.screenPadding(80); // leave an extra 80px of whitespace per side

                    // set up some event handlers to allow for node-dragging
                    that.initMouseHandling();
                },

                redraw: function () {
                    gfx.clear();
                    particleSystem.eachEdge(function (edge, p1, p2) {
                        if (edge.source.data.alpha * edge.target.data.alpha == 0) return;
                        gfx.line(p1, p2, { stroke: "#BFBFBF", width: 2, alpha: edge.target.data.alpha });
                    });
                    particleSystem.eachNode(function (node, pt) {
                        var w = Math.max(20, 20 + gfx.textWidth(node.name));
                        if (node.data.alpha === 0) return;
                        gfx.rect(pt.x - w / 2, pt.y - 8, w, 20, 4, { fill: "F9F9F9" });
                        gfx.text(node.name, pt.x, pt.y + 9, { color: "white", align: "center", font: "Arial", size: 12 });
                        gfx.text(node.name, pt.x, pt.y + 9, { color: "white", align: "center", font: "Arial", size: 12 });
                    });
                },

                initMouseHandling: function () {
                    // no-nonsense drag and drop (thanks springy.js)
                    var dragged = null;

                    // set up a handler object that will initially listen for mousedowns then
                    // for moves and mouseups while dragging
                    var handler = {
                        clicked: function (e) {
                            var pos = $(canvas).offset();
                            _mouseP = arbor.Point(e.pageX - pos.left, e.pageY - pos.top);
                            dragged = particleSystem.nearest(_mouseP);

                            if (dragged && dragged.node !== null) {
                                // while we're dragging, don't let physics move the node
                                dragged.node.fixed = true;
                            }

                            $(canvas).bind('mousemove', handler.dragged);
                            $(window).bind('mouseup', handler.dropped);

                            return false;
                        },
                        dragged: function (e) {
                            var pos = $(canvas).offset();
                            var s = arbor.Point(e.pageX - pos.left, e.pageY - pos.top);

                            if (dragged && dragged.node !== null) {
                                var p = particleSystem.fromScreen(s);
                                dragged.node.p = p;
                            }

                            return false;
                        },

                        dropped: function (e) {
                            if (dragged === null || dragged.node === undefined) return;
                            if (dragged.node !== null) dragged.node.fixed = false;
                            dragged.node.tempMass = 1000;
                            dragged = null;
                            $(canvas).unbind('mousemove', handler.dragged);
                            $(window).unbind('mouseup', handler.dropped);
                            _mouseP = null;
                            return false;
                        }
                    }; // start listening
                    $(canvas).mousedown(handler.clicked);

                }

            };
            return that;
        }


    </script>
}
